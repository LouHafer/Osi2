/*
  Copyright 2011 Lou Hafer, Matt Saltzman
  This code is licensed under the terms of the Eclipse Public License (EPL)

  Based on original design and code by Gigi Sayfan published in five parts
  in Dr. Dobbs, starting November 2007.
*/
/*! \file Osi2Plugin.hpp
    \brief Type definitions for the Osi2 plugin manager.

  This file contains the type definitions (types, structures, enums) used by
  the plugin framework. Generally useful for the plugin manager and for
  plugins.
*/
#ifndef OSI2_PLUGIN_HPP
#define OSI2_PLUGIN_HPP

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

namespace Osi2 {

// Forward declarations

  struct PlatformServices ;
  struct APIRegInfo ;
  struct ObjectParams ;

/// A typedef for null-terminated strings, so they're easy to recognise.

  typedef uint8_t CharString ;

/// Languages (C, C++) supported by the plugin framework.

  enum PluginLang { Plugin_C, Plugin_CPP } ;

/// Plugin manager API version number

struct PluginAPIVersion {
  int32_t major_ ;
  int32_t minor_ ;
} ;

/*! \brief Unique ID for a plugin library

  In order to match API registrations to plugin libraries, a unique ID is
  needed. This ID is generated by the plugin manager when the plugin library
  is loaded. It is passed to the plugin library in the PlatformServices
  parameter of the \link Osi2::InitFunc initialisation function \endlink.
  It must be returned by the plugin library in the \link Osi2::APIRegInfo
  API registration information object \endlink when the plugin \link
  Osi2::APIRegFunc registers an API \endlink. This allows the manager
  to unambiguously match an API registration to the plugin library that
  provides the API.
*/
typedef void *PluginUniqueID ;

/*! \defgroup PluginStateObjs Plugin State Objects

  The plugin manager allows (but does not require) a single state object for
  a plugin library and individual state objects for each API supplied by
  a plugin library. These can all be different objects or one and the same
  object; whatever is appropriate for the plugin. As far as the manager
  is concerned, they are opaque pointers. Distinct typedefs are provided for
  clarity of code.

  Note that the Osi2::PluginManager does not support unique state objects for
  each object supplied by the plugin.
*/
//@{

/*! \brief A plugin library state object

  This object can be used to hold information necessary to manage the
  plugin library's state, if any.

  If the library requires a library state object, a pointer to this object
  should be stored in the Osi2::PlatformServices object passed as a parameter
  of the \link Osi2::InitFunc initialisation function\endlink.  The pointer
  will be handed back to the plugin in the Osi2::PlatformServices object
  provided as one of the parameters for any call made by the PluginManager
  to the plugin (the functions Osi2::CreateFunc, Osi2::DestroyFunc, and
  Osi2::ExitFunc).
*/
typedef void PluginState ;

/*! \brief An API state object

  This object can be used to hold information necessary to manage the state
  of a particular API provided by a plugin, if any.

  If an API requires an API state object, a pointer to this object should
  be stored in the Osi2::APIRegInfo object passed as a parameter of the
  \link Osi2::APIRegFunc API registration function \endlink. The pointer
  will be handed back to the plugin in the Osi2::ObjectParams object provided
  as one of the parameters to the API object \link Osi2::CreateFunc creation
  \endlink and \link Osi2::DestroyFunc deletion \endlink functions.
*/
typedef void APIState ;

//@}

/*! \defgroup PluginFuncs Plugin Management Functions

  These functions are used for communication between the plugin and the
  plugin manager.

  The functions \link Osi2::APIRegFunc \endlink and \link
  Osi2::InvokeServiceFunc \endlink are defined by the Osi2::PluginManager and
  passed to the plugin in the Osi2::PlatformServices parameter of the \link
  Osi2::InitFunc initialisation function \endlink.

  All other functions are defined by the plugin library code. They must be
  defined by any plugin library, even if they do nothing.
*/
//@{
/*! \brief Constructor for an API object

  This function is implemented by the plugin and invoked by the
  Osi2::PluginManager to create an instance of an object implementing an
  API supported by the plugin library. A \c CreateFunc must be specified
  for each registered API, but exactly how the function is implemented is
  a decision for the plugin author.

  \param parms \link Osi2::ObjectParams parameters \endlink for use
       by the plugin to control object creation.
  \returns Pointer to an object supporting the requested API, or null for
       failure.
*/
typedef void *(*CreateFunc)(const ObjectParams *parms) ;

/*! \brief Destructor for an API object

  This function is implemented by the plugin and invoked by the
  Osi2::PluginManager to destroy instances of objects created by the
  plugin. A \c DestroyFunc must be specified for each registered
  API, but exactly how the function is implemented is a decision for the
  plugin author.

  \param victim the object to be destroyed.
  \param parms \link Osi2::ObjectParams parameters \endlink for use
       by the plugin to control object destruction.
  \returns 0 for success, nonzero for failure.
*/
typedef int32_t (*DestroyFunc)(void *victim, const ObjectParams *parms) ;

/*! \brief API registration function

  This function is implemented by the Osi2::PluginManager and passed to the
  plugin in the Osi2::PlatformServices parameter of the \link Osi2::InitFunc
  initialisation function \endlink. The plugin should invoke this function
  to register each API that it can provide. Typically this method is called
  as part of the execution of the \link Osi2::InitFunc initialisation
  function \endlink. It can also be invoked at any time while the plugin
  is active to register new APIs.

  \param apiStr A null-terminated character string identifying the API.
  \param parms  \link Osi2::APIRegInfo API registration information \endlink
	     for consumption by the plugin manager.
  \returns 0 for a successful registration, nonzero otherwise.
*/
typedef int32_t (*APIRegFunc)(const CharString *apiStr,
				const APIRegInfo *parms) ;

/*! \brief Function to allow the plugin to invoke services provided by the
       plugin manager.

  This method is implemented by the Osi2::PluginManager. A pointer
  is provided to the plugin in the Osi2::PlatformServices object. The
  plugin can invoke this function to access services provided by the
  Osi2::PluginManager.

  \param serviceName A null-terminated character string identifying the
		 service.
  \param serviceParams parameter object appropriate to service

  \returns 0 if the service is successfully invoked, nonzero otherwise

  \todo Implement this! Unimplemented as of 190711. In particular, the
  original design contemplated an error reporting mechanism.
*/
typedef int32_t (*InvokeServiceFunc)(const CharString *serviceName,
				     void *serviceParams) ;

/*! \brief Plugin exit function

  This function is called by the Osi2::PluginManager to tell the plugin
  to clean up and shut down in preparation for unloading the plugin
  library. The plugin library's \link Osi2::PluginState control object
  \endlink and \link Osi2::PluginUniqueID unique ID \endlink are provided
  in the Osi2::PlatformServices object.

  The Osi2::PluginManager expects the exit function to be returned by the
  \link Osi2::InitFunc initialisation function \endlink.

  \param services Services and plugin state information.
  \returns 0 for successful execution, nonzero otherwise.
*/
typedef int32_t (*ExitFunc)(const PlatformServices *services) ;

/*! \brief Plugin initialisation function

  The plugin manager will locate the \c initPlugin function with
  DynamicLibrary::getSymbol using the string \c "initPlugin" and call it
  to initialise the plugin library.

  If the plugin library requires a \link Osi2::PluginState state object
  \endlink, the initialisation function should fill in the \link
  Osi2::PlatformServices#ctrlObj_ ctrlObj_ \endlink field in the \p
  services parameter.

  If initialisation fails for any reason, the plugin is expected to take any
  actions required for clean up (in essence, ready itself for library unload)
  and return null.

  \param services Services and plugin state information.
  \returns A pointer to the library's \link Osi2::ExitFunc exit function
       \endlink, or null if initialisation fails.
 */
typedef ExitFunc (*InitFunc)(PlatformServices *services) ;

//@}


/*! \brief Information required to register an API with the plugin manager

  The plugin fills in this structure and provides it as a parameter to the
  \link Osi2::APIRegFunc API registration function \endlink.
*/
struct APIRegInfo {
  /// Plugin manager version expected by the plugin
  PluginAPIVersion version_ ;

  /*! \brief Unique plugin ID

    Supplied by the plugin manager in the \link Osi2::PlatformServices
    parameters \endlink for the \link Osi2::InitFunc initialisation
    function \endlink when the plugin library is initialised.
    Must be specified when registering an API in order to associate
    the API to the plugin library.
  */
  PluginUniqueID pluginID_ ;

  /// Implementation language of the API
  PluginLang lang_ ;

  /*! \brief Plugin control object for this API

    Optional pointer to an object holding state information used
    to manage objects supporting this API. This pointer will be
    returned to the plugin as part of the \link Osi2::ObjectParams
    parameters \endlink to the \link Osi2::CreateFunc create \endlink
    and \link Osi2::DestroyFunc destroy \endlink functions for
    objects of this API.
  */
  APIState *ctrlObj_ ;

  /// Constructor for API being registered
  CreateFunc createFunc_ ;
  /// Destructor for API being registered
  DestroyFunc destroyFunc_ ;
} ;

/*! \brief Parameters passed to a plugin for object creation and destruction.

  A plugin library may choose to support multiple APIs through generic \link
  Osi2::CreateFunc create \endlink and \link Osi2::DestroyFunc destroy
  \endlink functions, and objects associated with APIs may have state.
  Hence this information needs to be supplied when requesting object creation
  or destruction.
*/
struct ObjectParams {
  /// Character string specifying the API to be supplied
  const CharString *apiStr_ ;
  /*! \brief Services provided by the plugin manager

    See Osi2::PlatformServices.
  */
  const struct PlatformServices *platformServices_ ;
  /*! \brief Plugin control object for this API

    Optional pointer to an object holding state information used to manage
    objects supporting this API. This is the control object supplied with the
    \link Osi2::APIRegInfo registration parameters \endlink for this API.
  */
  APIState *ctrlObj_ ;
} ;

/*! \brief Attributes and methods provided by the plugin framework for use
       by plugins.

  A reference to this structure is provided, directly or indirectly, in the
  parameters of all functions used for communication between the plugin
  manager and the plugin library. In general, there are two classes of
  information: information about the plugin manager, useable by all plugin
  libraries; and information specific to the plugin library (the library's
  unique ID and control state object).

  \todo Provide some services!
*/
struct PlatformServices {
    /// Plugin manager version
    PluginAPIVersion version_ ;
    /// Default directory to search for plugins
    const CharString *dfltPluginDir_ ;
    /// Unique ID assigned to this plugin library
    PluginUniqueID pluginID_ ;
    /// Control object for this plugin library
    PluginState *ctrlObj_ ;
    /// Method to register an API supported by the plugin
    APIRegFunc registerAPI_ ;
    /*! \brief Method to allow the plugin to invoke a service provided by the
	       plugin manager.
    */
    InvokeServiceFunc invokeService_;
} ;


}  // end namespace Osi2

#ifdef  __cplusplus
}
#endif

#endif

